" .vimrc
"
" $HOME/.vimrc - setup file for vim (only)
"
" 2016/05/19 sckim
"
" 1) make it simple, not duplicate
" 2) search new tips always
"
" date: 20160929 update - pymode correction
" date: 20170321 update - from pathogen to vim-plug
" date: 20170324 update - some shortcuts
" date: 20170326 update - from vim to neovim date: 20170713 update - from neovim to vim (python3)
" date: 20180413 update - make it fast
" date: 20180703 update - set main editor as neovim

" Colors {{{
" make use of true color
"set termguicolors
" for the case of tmux color error
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

"let g:seoul256_background = 233
"colorscheme seoul256
set background=dark
"solarized8_flat, _low, _hi, None
colorscheme solarized8
"let g:solarized_old_cursor_style=1
let g:solarized_extra_hi_groups=1
let g:solarized_term_italics=0
let g:solarized_underline=0
let g:solarized_bold=1
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_degrade=1

syntax enable
" }}}

" Misc {{{
"set ttyfast
set clipboard=unnamed
set autowrite
set mouse=a
set rtp+=/usr/local/opt/fzf
set hlsearch
" }}}

" Spaces & Tabs {{{
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set modelines=1

filetype plugin indent on
" }}}

" UI Layout {{{
set number
"set cursorline
"set lazyredraw
"set showmatch
"set noshowmode
if has('gui_running')
  set guifont=D2Coding\ Powerline:h12
  "set guifont=D2Coding\ for\ Powerline:h12
  "set guifontwide=D2Coding\ for\ Powerline:h12
  "set guifont=MesloLGM-RegularForPowerline,D2CodingPowerline:h16
endif

set fileencoding=utf-8
set encoding=utf-8
"set linespace=3
"set textwidth=86
"set wrap linebreak nolist

let g:limelight_conceal_ctermfg = '240'
let g:limelight_conceal_guifg = '#777777'
let g:limelight_priority = -1
" }}}

" Line Shortcuts {{{
nnoremap gV `[V`]
" }}}

" Leader Shortcuts {{{
let mapleader=','
let maplocalleader=','

nnoremap <leader>M :MarkedToggle<CR>
nnoremap <leader>G :Goyo<CR>
nnoremap <leader>N <ESC>:NERDTree<cr>
nnoremap <leader>p :CtrlP<cr>
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>
nnoremap <silent> <Leader>t :TagbarToggle<CR>

nnoremap <leader>ev :sp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
"nnoremap <leader>s :mksession<CR>
nnoremap <leader><space> :nohlsearch<CR>

" make window movement using leader combination
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>en :lnext<CR>
inoremap jk <esc>
inoremap ㅓㅏ <esc>
nnoremap ㅓㅏ <esc>

nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" 글을 잘 쓰기 위해서
map <Leader>s <C-o>:setlocal spell! spelllang=en_us<CR>
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>dw :silent! StarDict<Space>
nnoremap <leader>d :silent! StarDictCursor<CR>
nnoremap <Leader>cw :ThesaurusQueryReplaceCurrentWord<CR>
vnoremap <Leader>cw y:ThesaurusQueryReplace <C-r>"<CR>
if !&wildcharm | set wildcharm=<C-z> | endif
execute 'nnoremap <leader>w :Wordy<space>'.nr2char(&wildcharm)
noremap <silent> <leader>ww :<C-u>NextWordy<cr>
xnoremap <silent> <leader>ww :<C-u>NextWordy<cr>
inoremap <silent> <leader>ww <C-o>:NextWordy<cr>

" }}}

" AutoGroups {{{
augroup configgroup
    autocmd!

    autocmd User VimtexEventQuit        call vimtex#compiler#clean(0)
    autocmd User VimtexEventInitPost    call vimtex#compiler#compile()

    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!
    autocmd! User goyo.vim echom 'Goyo is now loaded!'

    autocmd FocusLost * silent! wa
augroup END

au BufNewFile,BufRead *.geo set filetype=gmsh
au BufRead,BufNewFile *py,*pyw set foldmethod=indent

" Number of spaces that a pre-existing tab is equal to.
" For the amount of space used for a new tab use shiftwidth.
au BufRead,BufNewFile *py,*pyw,*.c,*.h,*html,*js set tabstop=8

" What to use for an indent.
" This will affect Ctrl-T and 'autoindent'.
" Python: 4 spaces
" C: tabs (pre-existing files) or 4 spaces (new files)
au BufRead,BufNewFile *.py,*pyw,*.html,*.js set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw,*.html,*.js set expandtab
fu Select_c_style()
    if search('^\t', 'n', 150)
        set shiftwidth=8
        set noexpandtab
    el
        set shiftwidth=4
        set expandtab
    en
endf
au BufRead,BufNewFile *.c,*.h call Select_c_style()
au BufRead,BufNewFile Makefile* set noexpandtab
au BufRead,BufNewFile *.js,*.html,*.css set softtabstop=2

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
" Python: No limit
" C: 79
" Uncomment this if you want to limit your textwidth in python
" can be very annoying ..
" au BufRead,BufNewFile *.py,*.pyc set textwidth=79
au BufRead,BufNewFile *.c,*.h set textwidth=79

" Turn off settings in 'formatoptions' relating to comment formatting.
" - c : do not automatically insert the comment leader when wrapping based on
"    'textwidth'
" - o : do not insert the comment leader when using 'o' or 'O' from command mode
" - r : do not insert the comment leader when hitting <Enter> in insert mode
" Python: not needed
" C: prevents insertion of '*' at the beginning of every line in a comment
au BufRead,BufNewFile *.c,*.h set formatoptions-=c formatoptions-=o formatoptions-=r

" Use UNIX (\n) line endings.
" Only used for new files so as to not force existing files to change their
" line endings.
" Python: yes
" C: yes
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" always trim trailing whitespace .. is there ever a good reason?
autocmd BufWritePre * :%s/\s\+$//e
" }}}

" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" CtrlP settings {{{
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_mruf_max=500
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_working_path_mode = 'ra'
" The Silver Searcher
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_use_caching = 1
endif
" Set the working directory to wherever the open file lives
set autochdir
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*/\.git/*
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=*.pdf,*.psd
set wildignore+=node_modules/*
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
            \ 'file': '\v\.(DS_Store|dtMeta|so|o|swp|pyc|egg|png|jpg|jpeg)$',
            \ 'link': 'some_bad_symbolic_links',
            \ }
"nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}

" Vimtex {{{
let g:vimtex_enabled = 1
let g:vimtex_fold_enabled = 1
let g:vimtex_fold_manual = 1
let g:vimtex_index_split_pos = 'below'
let g:vimtex_index_split_width = 10
let g:vimtex_index_show_help = 0
let g:vimtex_complete_enabled = 1
let g:vimtex_complete_close_braces = 1
let g:vimtex_quickfix_method = 'pplatex'
let g:vimtex_quickfix_open_on_warning = 0
let g:vimtex_quickfix_latexlog = {
            \ 'overfull' : 0,
            \ 'underfull' : 0,
            \ 'packages' : {
            \   'default' : 0,
            \},
            \}
let g:vimtex_view_general_viewer = 'displayline'
let g:vimtex_view_general_options = '-r @line @pdf'
let g:vimtex_latexmk_callback_hook = 'UpdateSkim'
function! UpdateSkim(status)
    if !a:status
        return
    endif
    let cmd = [g:vimtex_view_general_viewer, '-r']
    if !empty(system('pgrep Skim'))
        call extend(cmd, ['-g'])
    endif
    let out = b:vimtex.out()
    if has('nvim')
        call jobstart(cmd + [line('.'), out])
    elseif has('job')
        call job_start(cmd + [line('.'), out])
    else
        call system(join(cmd + [line('.'), shellescape(out)], ' '))
    endif
endfunction
" }}}

" airline {{{
"let g:airline_theme="molokai"
"let g:airline_theme='base16'
let g:airline_theme="solarized"
let g:airline_solarized_bg='dark'

let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
"let g:airline#extensions#default#section_use_groupitems = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#whitespace#enabled = 0

let g:airline#extensions#vimtex#enabled = 1
let g:airline#extensions#vimtex#viewer = 'v'

set ttimeoutlen=50
let g:airline_powerline_fonts=1
" }}}

" vim_markdown {{{
let g:pandoc#spell#enabled=0
let g:pandoc#folding#level=2
set complete+=kspell
let g:marked_filetypes = ["markdown", "mkd", "pandoc"]
"}}}

" Custom Functions {{{
let g:tq_online_backends_timeout = 0.4

"let g:XkbSwitchEnabled = 1
"let g:XkbSwitchLib = '/usr/local/lib/libInputSourceSwitcher.dylib'
"autocmd InsertLeave * call libcall('/usr/local/lib/libInputSourceSwitcher.dylib', 'Xkb_Switch_setXkbLayout', 'com.apple.keylayout.US')
"let g:XkbSwitchLoadRIMappings = 0
"let g:XkbSwitchKeymapNames = {'ko' : 'ko_keymap'}
"let g:XkbSwitchIMappingsSkipFt = ['tex']

let g:tagbar_width = 30
let g:stardict_split_size = 20
" }}}

" Launch Config {{{
    call plug#begin('$HOME/.vim/plugged')

    Plug 'tpope/vim-sensible'

    " 특정 appliction을 위해서{{{
    "Plug 'davidhalter/jedi-vim', { 'for': 'python' }
    Plug 'lervag/vimtex', { 'for': ['tex', 'latex'] }
    Plug 'craigemery/vim-autotag', { 'for': ['c', 'c++'] }
    Plug 'itspriddle/vim-marked'
    Plug 'vim-pandoc/vim-pandoc'
    Plug 'vim-pandoc/vim-pandoc-syntax'

    " 글을 잘쓰기 위해서
    Plug 'reedes/vim-wordy'
    Plug 'Ron89/thesaurus_query.vim'"}}}
    "Plug 'farconics/victionary'
    "Plug 'reedes/vim-lexical'
    Plug 'davidbeckingsale/writegood.vim', { 'for': 'markdown' }
    "Plug 'lyokha/vim-xkbswitch'
    Plug 'phongvcao/vim-stardict'

    " 눈이 즐겁기 위해서
    "Plug 'junegunn/seoul256.vim'
    Plug 'lifepillar/vim-solarized8'
    "Plug 'flazz/vim-colorschemes'
    Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
    Plug 'junegunn/limelight.vim'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    Plug 'christoomey/vim-tmux-navigator'
    "Plug 'freitass/todo.txt-vim'
    Plug 'tmux-plugins/vim-tmux'
    Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }

    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-obsession'
    Plug 'tpope/vim-repeat'

    "Plug 'SirVer/ultisnips'
    "Plug 'honza/vim-snippets'
    "Plug 'ervandew/supertab'
    "Plug 'jalvesaq/Nvim-R'

    Plug 'airblade/vim-gitgutter'
    Plug 'tpope/vim-fugitive'
    "Plug 'w0rp/ale'
    Plug '/usr/local/opt/fzf'

    "Plug 'jonhiggs/MacDict.vim'
    " On-demand loading
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'ctrlpvim/ctrlp.vim'
    call plug#end()
" }}}

" virtualenv {{{
if has("nvim")
" http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide#virtualenv
" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
endif
" }}}

" vim:foldmethod=marker:foldlevel=0
